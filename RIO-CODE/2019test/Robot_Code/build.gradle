plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.1.1"
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Maven central needed for JUnit
repositories {
    mavenCentral()
    jcenter()
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    compile 'gov.nist.math:jama:1.0.3'
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    testCompile 'junit:junit:4.12'
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

//build version plugin below this line 
tasks.register("DoVersionID"){
    doFirst {
        String filePath = 'src/main/deploy/version.dat'
        String versionFile = file(filePath).text //maintain path to versionFile file
        
        int[] versionIDLoc = findPos("VERSION_ID", versionFile)
        int versionID = 1 + (versionFile.substring(versionIDLoc[0], versionIDLoc[1] - 1) as Integer) //get version value from the versionFile file
        printf("New Version ID: %d", versionID)

        int[] authorLoc = findPos("BUILD_AUTHOR", versionFile)
        String newAuthor = System.getProperty('user.name')
        
        int[] timeLoc = findPos("BUILD_DATE", versionFile)
        String newTime = new Date().format("yyyyMMdd-HH:mm:ss", TimeZone.getTimeZone('EST'))

        //recreate file with new inputs
        String newVersionFile = versionFile.substring(0,versionIDLoc[0]) + versionID + ";"  //VERSION_ID
        newVersionFile += versionFile.substring(versionIDLoc[1], authorLoc[0]) + newAuthor + ";" //BUILD_AUTHOR
        newVersionFile += versionFile.substring(authorLoc[1], timeLoc[0]) + newTime + ";" //BUILD_DATE
        newVersionFile += versionFile.substring(timeLoc[1]) //rest of file
        file(filePath).text = newVersionFile // update versionFile class
    }
}
compileJava.dependsOn DoVersionID


//helper function to parse data file for variables
def int[] findPos(String name, String file){
    int loc = file.indexOf(name) //variable to find
    if(loc < 0){
        throw new GradleException(name +' not found in file! \nverify its presence and re-build')
    }
    int i = loc + name.length()
    char curr = 0
    while(curr != '=' && i < loc + 40){ //locate the equals sign after variable
        curr = file.charAt(i)
        i++
    }
    if(i >= loc + 39){
        throw new GradleException('Could not find = within 30 characters after ' + name)
    }
    int equalsPos = i
    //printf("found equal sign at: %d\n", i)
    while(curr != ';' && i < loc + 60){ //locate the semicolon
        curr = file.charAt(i)
        i++
    }
    if(i >= loc + 59){
        throw new GradleException('Could not find line ; within 50 characters after ' + name)
    }
    return [equalsPos, i]
}